{
	"info": {
		"_postman_id": "0fb9996b-ced6-4a9f-9602-9cabaa660e02",
		"name": "RockBuzz",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "OAuth2 Server",
			"item": [
				{
					"name": "Get Admin Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4fd5e788-1468-4315-8e7e-9773acba8774",
								"exec": [
									"const schema = {",
									"    \"properties\": {",
									"        \"token_type\": {",
									"            \"type\": \"string\",",
									"            \"pattern\": \"Bearer\",",
									"        },",
									"        \"expires_in\": {",
									"            \"type\": \"integer\",",
									"        },",
									"        \"access_token\": {",
									"            \"type\": \"string\",",
									"            \"pattern\": \"^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$\",",
									"        },",
									"        \"refresh_token\": {",
									"            \"type\": \"string\",",
									"            \"pattern\": \"^[a-z0-9]+$\",",
									"        },",
									"    },",
									"    \"required\": [",
									"        \"token_type\", ",
									"        \"expires_in\",",
									"        \"access_token\",",
									"        \"refresh_token\",",
									"    ],",
									"};",
									"",
									"pm.test(\"expect get token to be successfull\", () => {",
									"    pm.expect(pm.response.code).to.be.eql(200);",
									"",
									"    const json = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(json, schema)).to.be.true;",
									"    ",
									"    pm.environment.set(\"admin_token\", json.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"grant_type\": \"password\",\n\t\"client_id\": \"rockbuzz-admin\",\n\t\"client_secret\": \"rockbuzzadminsecret\",\n\t\"scope\": \"authors.findAll tags.findAll posts.findAll posts.author posts.tags\",\n\t\"username\": \"user@test.com\",\n\t\"password\": \"userpass\"\n}"
						},
						"url": {
							"raw": "{{rockbuzz-oauth2-base-uri}}/token",
							"host": [
								"{{rockbuzz-oauth2-base-uri}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Blog Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4fd5e788-1468-4315-8e7e-9773acba8774",
								"exec": [
									"const schema = {",
									"    \"properties\": {",
									"        \"token_type\": {",
									"            \"type\": \"string\",",
									"            \"pattern\": \"Bearer\",",
									"        },",
									"        \"expires_in\": {",
									"            \"type\": \"integer\",",
									"        },",
									"        \"access_token\": {",
									"            \"type\": \"string\",",
									"            \"pattern\": \"^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$\",",
									"        },",
									"    },",
									"    \"required\": [",
									"        \"token_type\", ",
									"        \"expires_in\",",
									"        \"access_token\",",
									"    ],",
									"};",
									"",
									"pm.test(\"expect get token to be successfull\", () => {",
									"    pm.expect(pm.response.code).to.be.eql(200);",
									"",
									"    const json = pm.response.json();",
									"",
									"    pm.expect(tv4.validate(json, schema)).to.be.true;",
									"    ",
									"    pm.environment.set(\"blog_token\", json.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"grant_type\": \"client_credentials\",\n\t\"client_id\": \"rockbuzz-blog\",\n\t\"client_secret\": \"rockbuzzblogsecret\",\n\t\"scope\": \"authors.findAll tags.findAll posts.findAll posts.author posts.tags\"\n}"
						},
						"url": {
							"raw": "{{rockbuzz-oauth2-base-uri}}/token",
							"host": [
								"{{rockbuzz-oauth2-base-uri}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post API",
			"item": [
				{
					"name": "Get all Authors As Blog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f72da62-820b-4b4e-ab00-8f75df2cae79",
								"exec": [
									"const schema = {",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\",",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\",",
									"        },",
									"    },",
									"    \"required\": [",
									"        \"id\", ",
									"        \"name\",",
									"    ],",
									"};",
									"",
									"pm.test(\"status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"body pass schema verification\", () => {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{blog_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{rockbuzz-post-api-base-uri}}/authors",
							"host": [
								"{{rockbuzz-post-api-base-uri}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Tags As Blog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48495f29-f98f-4cda-a1b5-154299d2bb60",
								"exec": [
									"const schema = {",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\",",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\",",
									"        },",
									"    },",
									"    \"required\": [",
									"        \"id\", ",
									"        \"name\",",
									"    ],",
									"};",
									"",
									"pm.test(\"status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"body pass schema verification\", () => {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{blog_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{rockbuzz-post-api-base-uri}}/tags",
							"host": [
								"{{rockbuzz-post-api-base-uri}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Posts As Blog",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b6583ff-2c83-4656-9e39-f0fcffe607dd",
								"exec": [
									"const schema = {",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\",",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"slug\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"body\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"author\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"type\": \"integer\",",
									"                },",
									"                \"name\": {",
									"                    \"type\": \"string\",",
									"                },",
									"            },",
									"            \"required\": [",
									"                \"id\", ",
									"                \"name\",",
									"            ],",
									"        },",
									"        \"tags\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": {",
									"                        \"type\": \"integer\",",
									"                    },",
									"                    \"name\": {",
									"                        \"type\": \"string\",",
									"                    },",
									"                },",
									"                \"required\": [",
									"                    \"id\", ",
									"                    \"name\",",
									"                ],",
									"            },",
									"        },",
									"    },",
									"    \"required\": [",
									"        \"id\", ",
									"        \"title\",",
									"        \"slug\",",
									"        \"body\",",
									"        \"author\",",
									"        \"tags\",",
									"    ],",
									"};",
									"",
									"pm.test(\"status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"body pass schema verification\", () => {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{blog_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{rockbuzz-post-api-base-uri}}/posts",
							"host": [
								"{{rockbuzz-post-api-base-uri}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Blog",
			"item": [
				{
					"name": "View All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a59e1319-d16a-4489-a3b1-689fe446cd72",
								"exec": [
									"const $ = cheerio.load(pm.response.text());",
									"",
									"const $posts = $(\"#posts-section article\");",
									"",
									"tests[\"expect to have one post\"] = $posts.length === 1;",
									"",
									"const $post = $($posts.get(0));",
									"",
									"tests[\"expect post to have title\"] = $post.find(\"header h3\").length === 1;",
									"tests[\"expect post to have body\"] = $post.find(\"p\").length === 1;",
									"tests[\"expect post to have link to read more\"] = $post.find(\"footer a\").length === 1;",
									"",
									"const $postTitle = $post.find(\"header h3\");",
									"const $postBody  = $post.find(\"p\");",
									"const $postLink  = $post.find(\"footer a\");",
									"",
									"tests[\"expect post title to be 'Tenacios D Biography'\"] = $postTitle.text() === \"Tenacios D Biography\";",
									"tests[\"expect post body to starts with 'Rightfully hailed as \\\"the greatest band on Earth,\\\"'\"] = $postBody.text().indexOf(\"Rightfully hailed as \\\"the greatest band on Earth,\\\"\") === 0;",
									"tests[\"expect post body to ends with 'a major-label album deal.'\"] = $postBody.text().indexOf(\"a major-label album deal.\") === $postBody.text().length - 25;",
									"tests[\"expect post read more link to be '/tenacios-d-biography'\"] = $postLink.attr(\"href\") === \"/tenacios-d-biography\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{rockbuzz-blog-base-uri}}",
							"host": [
								"{{rockbuzz-blog-base-uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "View No Posts Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a59e1319-d16a-4489-a3b1-689fe446cd72",
								"exec": [
									"const $ = cheerio.load(pm.response.text());",
									"",
									"const $posts = $(\"#posts-section article\");",
									"",
									"tests[\"expect to have one post\"] = $posts.length === 1;",
									"",
									"const $post = $($posts.get(0));",
									"",
									"tests[\"expect post to have title\"] = $post.find(\"header h3\").length === 1;",
									"tests[\"expect post to have body\"] = $post.find(\"p\").length === 1;",
									"",
									"const $postTitle = $post.find(\"header h3\");",
									"const $postBody  = $post.find(\"p\");",
									"",
									"tests[\"expect post title to be 'No posts found!'\"] = $postTitle.text() === \"No posts found!\";",
									"tests[\"expect post body to be 'Remove some filter on the left to see something.'\"] = $postBody.text() === \"Remove some filter on the left to see something.\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{rockbuzz-blog-base-uri}}?t[]=0",
							"host": [
								"{{rockbuzz-blog-base-uri}}"
							],
							"query": [
								{
									"key": "t[]",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Detail Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49ee98e3-f749-471c-bd23-487693d0df90",
								"exec": [
									"const $ = cheerio.load(pm.response.text());",
									"",
									"const $posts = $(\"#post-section article\");",
									"",
									"tests[\"expect to have one post\"] = $posts.length === 1;",
									"",
									"const $post = $($posts.get(0));",
									"",
									"tests[\"expect post to have title\"] = $post.find(\"header h3\").length === 1;",
									"tests[\"expect post to have body\"] = $post.find(\"p\").length === 1;",
									"",
									"const $postTitle = $post.find(\"header h3\");",
									"const $postBody  = $post.find(\"p\");",
									"",
									"tests[\"expect post title to be 'Tenacios D Biography'\"] = $postTitle.text() === \"Tenacios D Biography\";",
									"tests[\"expect post body to starts with 'Rightfully hailed as \\\"the greatest band on Earth,\\\"'\"] = $postBody.text().indexOf(\"Rightfully hailed as \\\"the greatest band on Earth,\\\"\") === 0;",
									"tests[\"expect post body to ends with ' ~ Heather Phares, Rovi'\"] = $postBody.text().indexOf(\" ~ Heather Phares, Rovi\") === $postBody.text().length - 23;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{rockbuzz-blog-base-uri}}/tenacios-d-biography",
							"host": [
								"{{rockbuzz-blog-base-uri}}"
							],
							"path": [
								"tenacios-d-biography"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}